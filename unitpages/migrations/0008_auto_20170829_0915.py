# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2017-08-29 14:15
from __future__ import unicode_literals

from django.db import migrations


def forward_data(apps, schema_editor):
    """
    Forward data migration: construct 'url' field from 'parent' and 'slug'
    """
    Page = apps.get_model("unitpages", "Page")
    page_qs = Page.objects.all()
    data = page_qs.values("pk", "parent", "slug")
    fwd_result = {d["pk"]: d for d in data}
    for pk, obj in fwd_result.items():
        slug = obj["slug"]
        p = obj["parent"]
        while True:
            if p is None:
                break
            p_obj = fwd_result[p]
            slug = p_obj["slug"] + "/" + slug
            p = p_obj["parent"]
        page = page_qs.get(pk=pk)
        page.url = "/" + slug + "/"
        page.save()


def backward_data(apps, schema_editor):
    """
    Backward data migration: construct 'slug' and 'parent' from 'url'
    """
    Page = apps.get_model("unitpages", "Page")
    page_qs = Page.objects.all()
    back_data = page_qs.values("pk", "url")
    slug_d = {}  # Map slug -> pk
    for obj in back_data:
        # populate page slugs
        obj["url"] = obj["url"].strip("/")
        obj["slug"] = obj["url"].rsplit("/", 1)[-1]
        slug_d[obj["slug"]] = obj["pk"]

    for obj in back_data:
        # populate page parents
        obj["parent"] = None
        if "/" in obj["url"]:
            parent_slug = obj["url"].rsplit("/", 2)[-2]
            # Backwards migration simplification: orphan and warn when this occurs.
            if parent_slug in slug_d:
                obj["parent"] = slug_d[parent_slug]
            else:
                print("WARNING: page {} is being orphaned!".format(obj["pk"]))
            obj["parent"] = slug_d[parent_slug]

        page = page_qs.get(pk=obj["pk"])
        page.parent_id = obj["parent"]
        page.slug = obj["slug"]
        page.save()


class Migration(migrations.Migration):

    dependencies = [("unitpages", "0007_page_url")]

    operations = [migrations.RunPython(forward_data, backward_data)]
